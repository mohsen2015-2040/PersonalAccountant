// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Domain.Models;
using Domain.Domain.Models;

namespace Domain;

public partial class DatabaseContext : DbContext
{
    public DatabaseContext(DbContextOptions<DatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CreditCard> CreditCards { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TransactionType> TransactionTypes { get; set; }

    public virtual DbSet<ErrorLog> ErrorLogs { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK_Account_AccountId");

            entity.ToTable("Account");

            entity.HasIndex(e => e.Username, "KEY_Account_Username").IsUnique();

            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_Account_RoleId");

        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK_Category_CategoryId");

            entity.ToTable("Category");

            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.TransactionType).WithMany(p => p.Categories)
                .HasForeignKey(d => d.TransactionTypeId)
                .HasConstraintName("FK_Category_TransactionTypeId")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Account).WithMany(p => p.Categories)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_Category_AccountId")
                .OnDelete(DeleteBehavior.Cascade);
        });


        modelBuilder.Entity<CreditCard>(entity =>
        {
            entity.HasKey(e => e.CreditCardId).HasName("PK_CreditCard_CreditCardId");

            entity.ToTable("CreditCard");

            entity.HasIndex(e => e.Number, "KEY_CreditCard_Number").IsUnique();

            entity.Property(e => e.Number)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.CreditCards)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_CreditCard_AccountId")
                .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK_Transaction_TransactionId");

            entity.ToTable("Transaction");

            entity.Property(e => e.CreationDate).HasColumnType("date");
            entity.Property(e => e.Description).HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Transaction_CategoryId")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.TransactionType).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TransactionTypeId)
                .HasConstraintName("FK_Transaction_TransactionTypeId")
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.CreditCard).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.CreditCardId)
                .HasConstraintName("FK_Transaction_CreditCardId")
                .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK_Role_RoleId");

            entity.ToTable("Role");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionType>(entity =>
        {
            entity.HasKey(e => e.TransactionTypeId).HasName("PK_TransactionType_TransactionTypeId");

            entity.ToTable("TransactionType");

            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(true);
        });

        modelBuilder.Entity<ErrorLog>(entity =>
        {
            entity.HasKey(e => e.ErrorLogId).HasName("PK_ErrorLog_ErrorLogId");

            entity.ToTable("ErrorLog");

            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(true);

            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}